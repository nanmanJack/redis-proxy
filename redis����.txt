https://blog.csdn.net/likuan0214/article/details/52704004

https://www.ibm.com/developerworks/cn/java/j-lo-jnileak/

http://amazontzy.iteye.com/blog/1962367
https://blog.csdn.net/jiangwei0910410003/article/details/17653857
https://zhidao.baidu.com/question/175901962160544124.html

https://zhidao.baidu.com/question/1671289223256773307.html
http://www.360doc.com/content/11/0819/15/2660674_141704496.shtml

http://www.91r.net/ask/4337591.html
http://www.91r.net/ask/4337591.html

https://blog.csdn.net/zhangyun438/article/details/17193563

https://blog.csdn.net/u010319687/article/details/45696295

https://blog.csdn.net/xyang81/article/details/42582213

https://i.cnblogs.com/PostDone.aspx?postid=8825129&actiontip=%E5%AD%98%E4%B8%BA%E8%8D%89%E7%A8%BF%E6%88%90%E5%8A%9F

http://blog.chinaunix.net/uid-7283526-id-2198861.html


http://blog.chinaunix.net/uid-7283526-id-2198861.html

https://www.cnblogs.com/xieqiankun/p/use_yield_correctly.html

http://blog.rootk.com/post/golang-asm.html

https://segmentfault.com/q/1010000000533960/a-1020000010785030

https://zhuanlan.zhihu.com/p/29892487
https://www.cnblogs.com/yjf512/archive/2013/01/16/2862216.html

https://studygolang.com/articles/7554


指针好处
https://blog.csdn.net/wujiangguizhen/article/details/17153495
https://blog.csdn.net/y780465649/article/details/52155694

https://blog.csdn.net/dagefeijiqumeiguo/article/details/73393369
https://blog.csdn.net/xyang81/article/details/44657385
http://developer.51cto.com/art/201204/332810.htm

https://www.jianshu.com/p/591e8d3ce093

https://www.zhihu.com/question/28250278
https://zhidao.baidu.com/question/336734778.html
https://blog.csdn.net/estream/article/details/1887717

https://blog.csdn.net/eggfly178/article/details/34793589
https://blog.csdn.net/xiven/article/details/4229599
https://blog.csdn.net/y780465649/article/details/52155694
https://www.zhihu.com/question/21713343
https://blog.csdn.net/huguohu2006/article/details/7397055

push 
https://github.com/efgod/GPush


#include <stdio.h>
#include <stdlib.h>
typedef struct{
	int age;
}A;
int main(){
	A* a = NULL;
	a = (A*)malloc(sizeof(A)*3);
	a[0].age = 10;
	printf("%d\n", a[0]);


	A* b[3];
	
	int i;
	for(i=0;i<3; i++) {
		b[i] = (A*)malloc(sizeof(A));
		
	}
	b[0]->age=10;
	printf("%d\n", b[0]);

	return 0;
}


typedef struct aeEventLoop { // 全局只需要一份EventLoop

	int maxfd;   // 目前已注册的最大描述符

	int setsize; // 目前已追踪的最大描述符

	long long timeEventNextId; // 用于生成时间事件 id

	time_t lastTime;     // 最后一次执行时间事件的时间

	aeFileEvent *events; // 已注册的文件事件 //数组指针，首先是个指针，指向数组的指针

	aeFiredEvent *fired; // 已就绪的文件事件

	aeTimeEvent *timeEventHead; // 时间事件

	int stop; // 事件处理器的开关

	void *apidata; // 多路复用库的私有数据, 一般用于存放aeApiState对象的指针,
	// 而aeApiState有着epoll_events结构的一个数组

	aeBeforeSleepProc *beforesleep; // 在处理事件前要执行的函数

} aeEventLoop;

typedef struct aeFileEvent {

	// 监听事件类型掩码，
	// 值可以是 AE_READABLE 或 AE_WRITABLE,
	// 或者 AE_READABLE | AE_WRITABLE
	int mask;

	aeFileProc *rfileProc; // 读事件处理器

	aeFileProc *wfileProc; // 写事件处理器

	void *clientData; // 多路复用库的私有数据
	 
} aeFileEvent;


typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);

/* A fired event -- 已就绪事件 */
typedef struct aeFiredEvent { 

	// 已就绪文件描述符
	int fd;

	// 事件类型掩码，
	// 值可以是 AE_READABLE 或 AE_WRITABLE
	// 或者是两者的或
	int mask;

} aeFiredEvent;

int main(int argc, char **argv) {
	initServerConfig(); //配置初始化
	initServer();
	// 运行事件处理器,一直到服务器关闭为止
	aeMain(server.el);
	return 0;
}

void initServerConfig() {
    /*
    port, tcp_backlog, maxclients初始化
    */
    server.port = REDIS_SERVERPORT; 
	server.tcp_backlog = REDIS_TCP_BACKLOG;
    server.maxclients = REDIS_MAX_CLIENTS;
    server.ipfd_count = 0;
    server.bindaddr_count = 0;
}

全局变量 struct redisServer server;
void initServer() {
    /*
    创建 一个eventloop结构体
    */
    server.el = aeCreateEventLoop(server.maxclients + REDIS_EVENTLOOP_FDSET_INCR);

    /*
    建立socket
    */
    listenToPort(server.port, server.ipfd, &server.ipfd_count) == REDIS_ERR)

    for (j = 0; j < server.ipfd_count; j++) {
		if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,
			acceptTcpHandler, NULL) == AE_ERR) {
			mylog("%s", "createFileEvent error!");
			exit(-1);
		}
	}
}


/*
 * 在port端口监听
 */
int listenToPort(int port, int *fds, int *count) {
	int j;

	if (server.bindaddr_count == 0) server.bindaddr[0] = NULL;

	for (j = 0; j < server.bindaddr_count || j == 0; j++) {
		if (server.bindaddr[j] == NULL) {
			fds[*count] = anetTcpServer(server.neterr, port, NULL, server.tcp_backlog);
			//即fds[0] = socket(...)
			if (fds[*count] != ANET_ERR) {
				anetNonBlock(NULL, fds[*count]); // 设置为非阻塞
				(*count)++;
			}
			if (*count) break; //循环直接退出
		} else {
			//什么时候这里不为空?
			// Bind IPv4 address.
			fds[*count] = anetTcpServer(server.neterr, port, server.bindaddr[j],
				server.tcp_backlog);
		}

		if (fds[*count] == ANET_ERR) {
			return REDIS_ERR;
		}
		anetNonBlock(NULL, fds[*count]);
		(*count)++;
	}
	return REDIS_OK;
}

int anetTcpServer(char *err, int port, char *bindaddr, int backlog) {
	return _anetTcpServer(err, port, bindaddr, AF_INET, backlog);
}

static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog) {
	int s, rv;
	char _port[6];
	struct addrinfo hints;
	struct addrinfo *servinfo, *p;

	snprintf(_port, 6, "%d", port); // 将端口的值转换为char类型
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = af;
	hints.ai_socktype = SOCK_STREAM; // 流式套接字
	//hints.ai_flags = AI_PASSIVE;

	if ((rv = getaddrinfo(bindaddr, _port, &hints, &servinfo)) != 0) {
		//anetSetError(err, "%s", gai_sererror(rv));
		return ANET_ERR;
	}

	for (p = servinfo; p != NULL; p = p->ai_next) {
		if ((s = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1)
			continue; // 创建套接字失败的话,继续
		if (anetSetReuseAddr(err, s) == ANET_ERR) goto error;
		if (anetListen(err, s, p->ai_addr, p->ai_addrlen, backlog) == ANET_ERR) goto error;

		goto end;
	}
	if (p == NULL) {
		anetSetError(err, "unable to bind socket");
		goto error;
	}
error:
	s = ANET_ERR;
end:
	freeaddrinfo(servinfo);
	return s;
}

/*
 * anetListen 绑定并创建监听套接字
 */
static int anetListen(char *err, int fd, struct sockaddr *sa, socklen_t len, int backlog) {
	if (bind(fd, sa, len) == -1) {
		anetSetError(err, "bind: %s", strerror(errno));
		close(fd);
		return ANET_ERR;
	}

	if (listen(fd, backlog) == -1) {
		anetSetError(err, "listen: %s", strerror(errno));
		close(fd);
		return ANET_ERR;
	}

	return ANET_OK;
}

 aeEventLoop* aeCreateEventLoop(int setsize) {
    aeEventLoop *eventLoop;
	int i;

	// 创建事件状态结构
	if ((eventLoop = zmalloc(sizeof(*eventLoop))) == NULL) goto err; // 大量使用goto语句

	/* 初始化文件事件结构和已就绪文件事件结构数组 */
	eventLoop->events = zmalloc(sizeof(aeFileEvent)*setsize);
	eventLoop->fired = zmalloc(sizeof(aeFiredEvent)*setsize);
	
	// 设置数组大小
	eventLoop->setsize = setsize;
	// 初始化执行最近一次执行时间
	eventLoop->lastTime = time(NULL); // 获得当前的时间

	// 初始化时间事件结构
	eventLoop->timeEventHead = NULL;
	eventLoop->timeEventNextId = 0; // 这个量随着时间事件的增加而增加

	eventLoop->stop = 0;
	eventLoop->maxfd = -1;
	eventLoop->beforesleep = NULL;
	if (aeApiCreate(eventLoop) == -1) goto err;

	// Events with mask == AE_NONE are not set. So let's initialize the
	// vector with it.
	// 初始化监听事件
	for (i = 0; i < setsize; i++)
		eventLoop->events[i].mask = AE_NONE; // 表示不监听任何的事件

	// 返回事件循环
	return eventLoop;
 }

 /*
 * 创建一个新的 epoll 实例，并将它赋值给 eventLoop
 */
int aeApiCreate(aeEventLoop *eventLoop) {

    aeApiState *state = zmalloc(sizeof(aeApiState));

    if (!state) return -1;

    // 初始化事件槽空间
    state->events = zmalloc(sizeof(struct epoll_event)*eventLoop->setsize);
    if (!state->events) {
        zfree(state);
        return -1;
    }

    // 创建 epoll 实例,一般来说,一个应用之中,只需要一个 epoll 实例便足够了
    state->epfd = epoll_create(1024); // 1024 is just a hint for the kernel
    if (state->epfd == -1) {
        zfree(state->events);
        zfree(state);
        return -1;
    }

    // 赋值给 eventLoop
	// apidata这个玩意被设置为了私有数据
    eventLoop->apidata = state;
    return 0;
}

/*
 * 根据 mask 参数的值，监听 fd 文件的状态,
 * 当 fd 可用时，执行 proc 函数

 */
int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,
	aeFileProc *proc, void *clientData)
{
	if (fd >= eventLoop->setsize) { //  fd不宜过大,超越了极限,便会出错.
		errno = ERANGE; // ERANGE表示超出界限
		return AE_ERR;
	}

	if (fd >= eventLoop->setsize) return AE_ERR;

	// 取出文件事件结构
	aeFileEvent *fe = &eventLoop->events[fd];

	// 监听指定 fd 的指定事件
	if (aeApiAddEvent(eventLoop, fd, mask) == -1)
		return AE_ERR;

	// 设置文件事件类型，以及事件的处理器
	fe->mask |= mask;
	if (mask & AE_READABLE) fe->rfileProc = proc;
	if (mask & AE_WRITABLE) fe->wfileProc = proc;

	// 私有数据
	fe->clientData = clientData; // clientData是什么玩意?

	// 如果有需要，更新事件处理器的最大fd
	if (fd > eventLoop->maxfd)
		eventLoop->maxfd = fd;

	return AE_OK;
}

/*
 * 关联给定事件到 fd
 */
int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) { // 添加到某个事件之上,好吧,主要是看封装,道理我们都懂是吧.
    aeApiState *state = eventLoop->apidata;
    struct epoll_event ee;

     // 如果 fd 没有关联任何事件，那么这是一个 ADD 操作。
     // 如果已经关联了某个/某些事件，那么这是一个 MOD 操作。
    int op = eventLoop->events[fd].mask == AE_NONE ?
            EPOLL_CTL_ADD : EPOLL_CTL_MOD;

    // 注册事件到 epoll
    ee.events = 0;
    mask |= eventLoop->events[fd].mask; // Merge old events
    if (mask & AE_READABLE) ee.events |= EPOLLIN;	// 关注可读事件
    if (mask & AE_WRITABLE) ee.events |= EPOLLOUT;  // 关注可写事件
    ee.data.u64 = 0; // avoid valgrind warning
    ee.data.fd = fd;

    if (epoll_ctl(state->epfd, op, fd, &ee) == -1) return -1; // -1代表失败.

    return 0; // 0代表成功.
}


/*
 * 事件处理器的主循环
 */
void aeMain(aeEventLoop *eventLoop) {

	eventLoop->stop = 0;

	while (!eventLoop->stop) {

		// 如果有需要在事件处理前执行的函数，那么运行它
		if (eventLoop->beforesleep != NULL)
			eventLoop->beforesleep(eventLoop);

		// 开始处理事件
		aeProcessEvents(eventLoop, AE_ALL_EVENTS);
	}
}

/*
 * 处理所有已到达的时间事件，以及所有已就绪的文件事件。
 *
 * 如果不传入特殊 flags 的话，那么函数睡眠直到文件事件就绪，
 * 或者下个时间事件到达（如果有的话）。
 *
 * 如果 flags 为 0,那么函数不作动作,直接返回。
 * 如果 flags 包含 AE_ALL_EVENTS,所有类型的事件都会被处理。
 * 如果 flags 包含 AE_FILE_EVENTS,那么处理文件事件。
 * 如果 flags 包含 AE_TIME_EVENTS,那么处理时间事件。
 * 如果 flags 包含 AE_DONT_WAIT,
 * 那么函数在处理完所有不许阻塞的事件之后，即刻返回。
 *
 * 函数的返回值为已处理事件的数量
 */
int aeProcessEvents(aeEventLoop *eventLoop, int flags)
{
	int processed = 0, numevents;
	int j;

	// Nothing to do? return ASAP
	// AE_TIME_EVENTS代表时间事件,AE_FILE_EVENTS代表文件事件
	if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;

	if (eventLoop->maxfd != -1 ||
		((flags & AE_TIME_EVENTS) && !(flags & AE_DONT_WAIT))) { // 需要处理时间事件
		int j;
		aeTimeEvent *shortest = NULL;
		struct timeval tv, *tvp;

		// 获取最近的时间事件(即即将发生的事件)
		if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
			shortest = aeSearchNearestTimer(eventLoop);
		if (shortest) {
			// 如果时间事件存在的话
			// 那么根据最近可执行时间事件和现在时间的时间差来决定文件事件的阻塞时间
			long now_sec, now_ms;

			// 计算距今最近的时间事件还要多久才能达到
			// 并将该时间距保存在 tv 结构中
			// 并在下面的aeApiPoll函数中等待该事件的到来
			aeGetTime(&now_sec, &now_ms);
			tvp = &tv;
			tvp->tv_sec = shortest->when_sec - now_sec;
			if (shortest->when_ms < now_ms) {
				tvp->tv_usec = ((shortest->when_ms + 1000) - now_ms) * 1000;
				tvp->tv_sec--;
			}
			else {
				tvp->tv_usec = (shortest->when_ms - now_ms) * 1000;
			}

			// 时间差小于 0 ，说明事件已经可以执行了，将秒和毫秒设为 0 （不阻塞）
			if (tvp->tv_sec < 0) tvp->tv_sec = 0;
			if (tvp->tv_usec < 0) tvp->tv_usec = 0;
		}
		else {
			// 执行到这一步，说明没有时间事件
			// 那么根据 AE_DONT_WAIT 是否设置来决定是否阻塞，以及阻塞的时间长度
			if (flags & AE_DONT_WAIT) {
				// 设置文件事件不阻塞
				tv.tv_sec = tv.tv_usec = 0;
				tvp = &tv;
			}
			else {
				tvp = NULL; // 文件事件可以阻塞直到有事件到达为止
			}
		}

		// 处理文件事件，阻塞时间由 tvp 决定, 总之,如果有事件的话,一定要等到有事件发生才返回
		numevents = aeApiPoll(eventLoop , tvp);
		for (j = 0; j < numevents; j++) {
			// 从已就绪数组中 fired 获取已发生事件的信息,包括文件描述符fd,发生的事情mask
			aeFileEvent *fe = &eventLoop->events[eventLoop->fired[j].fd];

			int mask = eventLoop->fired[j].mask;
			int fd = eventLoop->fired[j].fd;
			int rfired = 0;

			
			if (fe->mask & mask & AE_READABLE) { // 可读事件
				// rfired 确保读/写事件只能执行其中一个 
				rfired = 1;
				fe->rfileProc(eventLoop, fd, fe->clientData, mask);
			}
			
			if (fe->mask & mask & AE_WRITABLE) { // 写事件
				if (!rfired || fe->wfileProc != fe->rfileProc)
					fe->wfileProc(eventLoop, fd, fe->clientData, mask);
			}

			processed++;
		}
	}

	// 执行时间事件
	if (flags & AE_TIME_EVENTS)
		processed += processTimeEvents(eventLoop);

	return processed; // return the number of processed file/time events
}

/*
 * 获取可执行事件
 */
int aeApiPoll(aeEventLoop *eventLoop , struct timeval *tvp) {
    aeApiState *state = eventLoop->apidata;
    int retval, numevents = 0;

    // 等待时间
	retval = epoll_wait(state->epfd, state->events, eventLoop->setsize,
    tvp ? (tvp->tv_sec*1000 + tvp->tv_usec/1000) : -1); // 等待一段时间
	// 函数调用完成之后state->events中存放了就绪事件的信息.

    // 有至少一个事件就绪？
    if (retval > 0) {
        int j;

        // 为已就绪事件设置相应的模式
        // 并加入到 eventLoop 的 fired 数组中
        numevents = retval;
        for (j = 0; j < numevents; j++) {
            int mask = 0;
            struct epoll_event *e = state->events + j;

            if (e->events & EPOLLIN) mask |= AE_READABLE; // 可读
            if (e->events & EPOLLOUT) mask |= AE_WRITABLE; // 可写
            if (e->events & EPOLLERR) mask |= AE_WRITABLE; // 出错
            if (e->events & EPOLLHUP) mask |= AE_WRITABLE;

            eventLoop->fired[j].fd = e->data.fd; // 放入到就绪队列之中
            eventLoop->fired[j].mask = mask; // 干的漂亮,我想说的一点是,既然是这么放的话,那么应该一次性处理完所有的事件,然后才能继续调用epoll_wait
        }
    }
    
    // 返回已就绪事件个数
    return numevents;
}


/*
 * 创建一个 TCP 连接处理器
 */
void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {
	int cport, cfd;
	char cip[REDIS_IP_STR_LEN];

	for (; ; ) {
		cfd = anetTcpAccept(server.neterr, fd, cip, sizeof(cip), &cport); // 获得ip地址以及端口号
		if (cfd == ANET_ERR) {
			break; // 出错直接终止循环 
			if (errno != EWOULDBLOCK) {
				// log
				return;
			}
		}
		acceptCommonHandler(cfd, 0); // 为客户端创建客户端状态
	}
}

/*
 * TCP 连接 accept 函数, 对acccept函数做了简单的封装, 最终返回连接的描述符
 */
int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {
	int fd;
	struct sockaddr_storage sa;
	socklen_t salen = sizeof(sa);
	if ((fd = anetGenericAccept(err, s, (struct sockaddr*)&sa, &salen)) == -1)
		return ANET_ERR;

	if (sa.ss_family == AF_INET) {
		struct sockaddr_in *s = (struct sockaddr_in *)&sa;
		// 将对方的信息记录下来,包括ip地址以及端口信息
		if (ip) inet_ntop(AF_INET, (void*)&(s->sin_addr), ip, ip_len);
		if (port) *port = ntohs(s->sin_port);
	}
	return fd;
}

/*
 * anetGenericAccept 用于获取一个连接,返回连接的描述符.
 */
static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {
	int fd;
	while (1) {
		fd = accept(s, sa, len);
		if (fd == -1) {
			if (errno == EINTR)
				continue;
			else {
				anetSetError(err, "accept: %s", strerror(errno));
				return ANET_ERR;
			}
		}
		break;
	}
	return fd;
}

/*
 * TCP 连接 accept 处理器
 */
#define MAX_ACCEPTS_PER_CALL 1000
static void acceptCommonHandler(int fd, int flags) {
	// 创建客户端
	redisClient *c;
	// 在createClient函数中大概做了这么一些事情,首先是构造了一个redisClient结构,
	// 最为重要的是,完成了fd与RedisClient结构的关联,并且完成了该结构的初始化工作.
	// 并将这个结果挂到了server的clients链表上.
	// 还有一点,那就是对该fd的读事件进行了监听.
	if ((c = createClient(fd)) == NULL) {
		// log
		close(fd);
		return;
	}
}

/*
 * 创建一个新的客户端
 */
redisClient *createClient(int fd) {
	redisClient *c = zmalloc(sizeof(redisClient));
	// 当 fd 不为 -1 时，创建带网络连接的客户端
	// 如果 fd 为 -1 ，那么创建无网络连接的伪客户端
	// 因为 Redis 的命令必须在客户端的上下文中使用，所以在执行 Lua 环境中的命令时
	// 需要用到这种伪终端. 
	if (fd != -1) {
		anetNonBlock(NULL, fd);
		anetEnableTcpNoDelay(NULL, fd); // 禁用 Nagle算法

		if (server.tcpkeepalive) {
			anetKeepAlive(NULL, fd, server.tcpkeepalive);
		}

		// 绑定读事件到事件loop(开始接收命令请求)
		if (aeCreateFileEvent(server.el, fd, AE_READABLE,
			readQueryFromClient, c) == AE_ERR) {
			close(fd);
			zfree(c);
			return NULL;
		}
	}

	// 使用默认数据库
	selectDb(c, 0);

	/* 初始化各个属性 */
	c->fd = fd;
	c->name = NULL;
	c->bufpos = 0; // 回复缓冲区的偏移量
	c->querybuf = sdsempty();
	c->reqtype = 0; // 命令请求的类型
	c->argc = 0; // 命令参数的数量
	c->argv = NULL; // 命令参数
	c->cmd = c->lastcmd = NULL; // 当前执行的命令和最近一次执行的命令
	c->lastinteraction = server.unixtime; // 最后一次互动时间
	c->bulklen = -1; // 读入的参数的长度
	c->multibulklen = 0; // 查询缓冲区中未读入的命令内容数量

	c->reply = listCreate(); // 回复链表 
	c->reply_bytes = 0; //  回复链表的字节量

	listSetFreeMethod(c->reply, decrRefCountVoid);
	listSetDupMethod(c->reply, dupClientReplyValue);

	if (fd != -1) listAddNodeTail(server.clients, c); // 如果不是伪客户端,那么添加服务器的客户端到客户端链表之中

	return c;

}


/*
 * 读取客户端的查询缓冲区内容
 */
void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {
	redisClient *c = (redisClient *)privdata;
	int nread, readlen;
	size_t qblen;

	server.current_client = c; // 设置服务器的当前客户端

	readlen = REDIS_IOBUF_LEN; // 读入长度,默认为16MB

	// 获取查询缓冲区当前内容的长度 
	qblen = sdslen(c->querybuf); 

	// 为查询缓冲区分配空间
	c->querybuf = sdsMakeRoomFor(c->querybuf, readlen);
	// 读入内容到查询缓存
	nread = read(fd, c->querybuf + qblen, readlen);

	if (nread == -1) {
		if (errno == EAGAIN) {
			nread = 0;
		} 
		else {
			mylog("Reading from client: %s", strerror(errno));
			return;
		}
	}
	else if (nread == 0) { // 对方关闭了连接
		mylog("%s", "Client closed connection");
		freeClient(c);
		return;
	}

	if (nread) {
		sdsIncrLen(c->querybuf, nread);
		c->lastinteraction = server.unixtime; // 更新最后一次互动的时间
	} 
	else {
		// 在 nread == -1 且 errno == EAGAIN 时运行
		server.current_client = NULL;
		return;
	}
	//
	// 从查询缓存中读取内容,创建参数,并执行命令,函数会执行到缓存中的所有内容都被处理完为止
	//
	processInputBuffer(c);
	server.current_client = NULL;
}

/*
 * 因为 I/O 复用的缘故，需要为每个客户端维持一个状态。
 *
 * 多个客户端状态被服务器用链表连接起来。
 */
typedef struct redisClient {
	int fd; //  套接字描述符

	redisDb *db; // 当前正在使用的数据库

	int dictid; //  当前正在使用的数据库的 id （号码）

	robj *name; // 客户端的名字

	sds querybuf; // 查询缓冲区

	int argc; // 参数数量

	robj **argv; // 参数对象数组

	struct redisCommand *cmd, *lastcmd; // 记录被客户端执行的命令

	int reqtype; // 请求的类型,是内联命令还是多条命令 

	int multibulklen; // 剩余未读取的命令内容数量

	long bulklen; // 命令内容的长度

	list *reply; // 回复链表

	int sentlen; // 已发送字节,处理short write时使用

	unsigned long reply_bytes; // 回复链表中对象的总大小

	int bufpos; // 回复偏移量

	char buf[REDIS_REPLY_CHUNK_BYTES];

	time_t lastinteraction; // 客户端最后一次和服务器互动的时间

} redisClient;


//
// redisCommand Redis 命令
//
struct redisCommand {

	// 命令名字
	char *name;

	// 实现函数
	redisCommandProc *proc;

	// 参数个数
	int arity;

	// 字符串表示的 FLAG
	char *sflags; /* Flags as string representation, one char per flag. */

	int flags; // 实际flag 

	// 做了一些简化,删除了一些不常用的域
};

void processInputBuffer(redisClient *c) {
	// 尽可能地处理查询缓存区中的内容.如果读取出现short read, 那么可能会有内容滞留在读取缓冲区里面
	// 这些滞留的内容也许不能完整构成一个符合协议的命令,需要等待下次读事件的就绪.
	while (sdslen(c->querybuf)) {

		if (!c->reqtype) {
			if (c->querybuf[0] == '*') {
				c->reqtype = REDIS_REQ_MULTIBULK; // 多条查询 
			}
			else {
				c->reqtype = REDIS_REQ_INLINE; // 内联查询 
			}
		}
		// 将缓冲区的内容转换成命令,以及命令参数
		if (c->reqtype == REDIS_REQ_INLINE) {
			if (processInlineBuffer(c) != REDIS_OK) break;
		}
		else if (c->reqtype == REDIS_REQ_MULTIBULK) {
			if (processMultibulkBuffer(c) != REDIS_OK) break;
		}
		else {
			// todo
		}

		if (c->argc == 0) {
			resetClient(c); // 重置客户端
		}
		else {
			if (processCommand(c) == REDIS_OK)
				resetClient(c);
		}
	}
}

/*
 * 这个函数相当于parse,处理命令
 */
int processInlineBuffer(redisClient *c) {
	char *newline;
	int argc, j;
	sds *argv, aux;
	size_t querylen;

	newline = strchr(c->querybuf, '\n'); // 寻找一行的结尾

	// 如果接收到了错误的内容,出错
	if (newline == NULL) {
		return REDIS_ERR;
	}

	// 处理\r\n 
	if (newline && newline != c->querybuf && *(newline - 1) == '\r')
		newline--;

	/* 然后根据空格,来分割命令的参数
	 * 比如说 SET msg hello \r\n将被分割成
	 * argv[0] = SET
	 * argv[1] = msg
	 * argv[2] = hello
	 * argc = 3
	 */
	querylen = newline - (c->querybuf);
	aux = sdsnewlen(c->querybuf, querylen);
	argv = sdssplitargs(aux, &argc);
	sdsfree(aux);

	// 从缓冲区中删除已经读取了的内容,剩下的内容是未被读取的
	sdsrange(c->querybuf, querylen + 2, -1);

	if (c->argv) free(c->argv);
	c->argv = zmalloc(sizeof(robj*)*argc);

	// 为每个参数创建一个字符串对象
	for (c->argc = 0, j = 0; j < argc; j++) {
		if (sdslen(argv[j])) {
			// argv[j] 已经是 SDS 了
			// 所以创建的字符串对象直接指向该 SDS
			c->argv[c->argc] = createObject(REDIS_STRING, argv[j]);
			c->argc++;
		}
		else {
			sdsfree(argv[j]);
		}
	}
	zfree(argv);
	return REDIS_OK;
}

/*
 * 这个函数执行时，我们已经读入了一个完整的命令到客户端，
 * 这个函数负责执行这个命令，
 * 或者服务器准备从客户端中进行一次读取。
 * 如果这个函数返回 1 ，那么表示客户端在执行命令之后仍然存在，
 * 调用者可以继续执行其他操作。
 * 否则，如果这个函数返回 0 ，那么表示客户端已经被销毁。
 */
int processCommand(redisClient *c) {
	// 查找命令，并进行命令合法性检查，以及命令参数个数检查
	
	char *cmd = c->argv[0]->ptr;
	c->cmd = c->lastcmd = lookupCommand(c->argv[0]->ptr);
	call(c, REDIS_CALL_FULL);
}

/*
 * 根据给定命令名字（SDS），查找命令
 */
struct redisCommand *lookupCommand(sds name) {
	return dictFetchValue(server.commands, name);
}

//
// redisObject Redis对象
// 
typedef struct redisObject {

	unsigned type : 4; // 类型

	unsigned encoding : 4; // 编码

	int refcount; // 引用计数

	void *ptr; // 指向实际值的指针
} robj;